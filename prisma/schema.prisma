generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  name                String
  lastName            String
  email               String        @unique
  password            String
  phone               String
  birthDate           DateTime
  country             String
  state               String
  city                String
  currency            String
  preferredLanguage   String
  occupation          String
  company             String?
  verified            Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  onboarding          Boolean       @default(false)
  onboardingCompleted Boolean       @default(false)
  onboardingData      Onboarding?
  budgets             Budget[]
  transactions        Transaction[]
  goals               Goal[]
  
  // Gamificación
  gamificationEvents  GamificationEvent[]
  finScoreHistory     FinScoreHistory[]
  userStreak          UserStreak?
  userBadges          UserBadge[]
  challengeParticipants ChallengeParticipant[]

  @@map("users")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  amount      Float
  type        TransactionType
  description String?
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  category_id String
  category    Category        @relation(fields: [category_id], references: [id])
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Budget {
  id               String   @id @default(uuid())
  amount           Float
  alert_percentage Float    @default(80)
  category_id      String
  created_at       DateTime @default(now())
  end_date         DateTime
  is_active        Boolean  @default(true)
  name             String
  period           String
  spent            Float    @default(0)
  start_date       DateTime
  updated_at       DateTime @updatedAt
  user_id          String
  category         Category @relation(fields: [category_id], references: [id])
  user             User     @relation(fields: [user_id], references: [id])

  @@map("budgets")
}

model Onboarding {
  id                 String   @id @default(cuid())
  userId             String   @unique
  mainGoals          Json
  mainChallenge      String
  mainChallengeOther String?
  savingHabit        String
  emergencyFund      String
  financialFeeling   String
  incomeRange        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

model Category {
  id           String          @id @default(cuid())
  name         String
  type         TransactionType
  icon         String
  isDefault    Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  budgets      Budget[]
  transactions Transaction[]
  goals        Goal[]

  @@map("categories")
}

model Goal {
  id                        String    @id @default(uuid())
  userId                    String
  name                      String
  description               String?
  targetAmount              Float
  currentAmount             Float     @default(0)
  targetDate                DateTime?
  categoryId                String
  priority                  String    @default("medium")
  isCompleted               Boolean   @default(false)
  isActive                  Boolean   @default(true)
  monthlyTargetPercentage   Float?
  monthlyContributionAmount Float?
  contributionsCount        Int       @default(0)
  lastContributionDate      DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category                  Category  @relation(fields: [categoryId], references: [id])

  @@map("goals")
}

enum TransactionType {
  INCOME
  EXPENSE
}

// =============================================
// MODELOS DE GAMIFICACIÓN
// =============================================

// Sistema de Eventos de Gamificación
model GamificationEvent {
  id            String   @id @default(cuid())
  userId        String
  eventType     String   // 'add_tx', 'goal_complete', 'budget_overspend', etc.
  eventData     Json?    // Datos específicos del evento
  pointsAwarded Int      @default(0)
  createdAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("gamification_events")
  @@index([userId, eventType])
  @@index([createdAt])
}

// FinScore Histórico  
model FinScoreHistory {
  id           String   @id @default(cuid())
  userId       String
  score        Int      // 0-100
  breakdown    Json     // {savings: 25, budget: 20, streak: 15, debt: 10}
  calculatedAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("finscore_history")
  @@index([userId, calculatedAt])
}

// Sistema de Rachas
model UserStreak {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  currentStreak           Int       @default(0)
  longestStreak           Int       @default(0)
  lastActivityDate        DateTime?
  streakType              String    @default("daily") // 'daily', 'budget', 'savings'
  salvividasUsedThisMonth Boolean   @default(false)
  lastSalvividasDate      DateTime?
  updatedAt               DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_streaks")
}

// Sistema de Badges
model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String   // 'primer_paso', 'planificador', etc.
  earnedAt  DateTime @default(now())
  isFeatured Boolean @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, badgeId])
  @@map("user_badges")
  @@index([userId])
}

// Desafíos Mensuales
model MonthlyChallenge {
  id            String   @id @default(cuid())
  name          String
  description   String
  startDate     DateTime
  endDate       DateTime
  criteria      Json     // Criterios específicos del desafío
  rewardBadgeId String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  
  participants ChallengeParticipant[]
  
  @@map("monthly_challenges")
  @@index([isActive, startDate, endDate])
}

// Participación en Desafíos
model ChallengeParticipant {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  joinedAt    DateTime @default(now())
  progress    Json     @default("{}")
  completed   Boolean  @default(false)
  rank        Int?     // Para rankings
  completedAt DateTime?
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge MonthlyChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, challengeId])
  @@map("challenge_participants")
  @@index([challengeId, completed])
  @@index([userId])
}

// Enums para Gamificación
enum EventType {
  ADD_TX
  EDIT_TX
  DELETE_TX
  CREATE_BUDGET
  OVERSPEND
  WITHIN_BUDGET
  CREATE_GOAL
  GOAL_CONTRIB
  GOAL_COMPLETE
  TIP_ACCEPTED
  TIP_IGNORED
  DAILY_OPEN
  STREAK_BREAK
}

enum BadgeType {
  PRIMER_PASO
  PLANIFICADOR
  AHORRO_ROOKIE
  ZENIO_LOVER
  ANTI_DOOM_SPENDER
  RACHA_FUEGO
  AHORRADOR_NOVATO
  PRESUPUESTO_MAESTRO
  META_CRUSHER
}
